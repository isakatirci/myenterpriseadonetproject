/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 5/6/2019 1:07:04 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using ProjectNameNorthwind.Data;
using ProjectNameNorthwind.Data.Interfaces;
using ProjectNameNorthwind.Business.Interfaces;
using ProjectNameNorthwind.Business.Repository.Interfaces;

namespace ProjectNameNorthwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOProduct.
	///It maintains a collection of BOOrderItem objects.
	///</Summary>
	public partial class BOProduct : BaseBusiness, IBOProduct, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _id;
		protected string _productName;
		protected Int32? _supplierId;
		protected decimal? _unitPrice;
		protected string _package;
		protected bool? _isDiscontinued;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOOrderItem> _boOrderItemCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IProductRepository _iProductRepository;
		protected IOrderItemRepository _iOrderItemRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOProduct()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public void Init(Int32 id)
		{
			try
			{
				IDAOProduct daoProduct = _iProductRepository.SelectOne(id);
				_id = daoProduct.Id;
				_productName = daoProduct.ProductName;
				_supplierId = daoProduct.SupplierId;
				_unitPrice = daoProduct.UnitPrice;
				_package = daoProduct.Package;
				_isDiscontinued = daoProduct.IsDiscontinued;
				_ctrVersion = daoProduct.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOProduct
		///</parameters>
		protected internal BOProduct(IDAOProduct daoProduct)
		{
			try
			{
				_id = daoProduct.Id;
				_productName = daoProduct.ProductName;
				_supplierId = daoProduct.SupplierId;
				_unitPrice = daoProduct.UnitPrice;
				_package = daoProduct.Package;
				_isDiscontinued = daoProduct.IsDiscontinued;
				_ctrVersion = daoProduct.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Product record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOProduct daoProduct = _iProductRepository.New();
			RegisterDataObject( _iProductRepository, _iProductRepository.BaseData(daoProduct));
			BeginTransaction( _iProductRepository, "savenewBOProduct");
			try
			{
				daoProduct.ProductName = _productName;
				daoProduct.SupplierId = _supplierId;
				daoProduct.UnitPrice = _unitPrice;
				daoProduct.Package = _package;
				daoProduct.IsDiscontinued = _isDiscontinued;
				_iProductRepository.Insert(daoProduct);
				CommitTransaction( _iProductRepository);
				Done(this);
				
				_id = daoProduct.Id;
				_productName = daoProduct.ProductName;
				_supplierId = daoProduct.SupplierId;
				_unitPrice = daoProduct.UnitPrice;
				_package = daoProduct.Package;
				_isDiscontinued = daoProduct.IsDiscontinued;
				_ctrVersion = daoProduct.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductRepository, "savenewBOProduct");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Product record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOProduct
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOProduct daoProduct = _iProductRepository.New();
			RegisterDataObject(_iProductRepository, _iProductRepository.BaseData(daoProduct));
			BeginTransaction(_iProductRepository, "updateBOProduct");
			try
			{
				daoProduct.Id = _id;
				daoProduct.ProductName = _productName;
				daoProduct.SupplierId = _supplierId;
				daoProduct.UnitPrice = _unitPrice;
				daoProduct.Package = _package;
				daoProduct.IsDiscontinued = _isDiscontinued;
				daoProduct.CtrVersion = _ctrVersion;
				_iProductRepository.Update(daoProduct);
				CommitTransaction(_iProductRepository);
				Done(this);
				
				_id = daoProduct.Id;
				_productName = daoProduct.ProductName;
				_supplierId = daoProduct.SupplierId;
				_unitPrice = daoProduct.UnitPrice;
				_package = daoProduct.Package;
				_isDiscontinued = daoProduct.IsDiscontinued;
				_ctrVersion = daoProduct.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductRepository, "updateBOProduct");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Product record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOProduct daoProduct = _iProductRepository.New();
			RegisterDataObject(_iProductRepository, _iProductRepository.BaseData(daoProduct));
			BeginTransaction(_iProductRepository, "deleteBOProduct");
			try
			{
				daoProduct.Id = _id;
				_iProductRepository.Delete(daoProduct);
				CommitTransaction(_iProductRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductRepository, "deleteBOProduct");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///ProductCollection
		///This method returns the collection of BOProduct objects
		///</Summary>
		///<returns>
		///IList[IBOProduct]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOProduct> ProductCollection(IProductRepository iProductRepository)
		{
			Doing(null);
			try
			{
				IList<IBOProduct> boProductCollection = new List<IBOProduct>();
				IList<IDAOProduct> daoProductCollection = iProductRepository.SelectAll();
				Done(null);
				
				foreach(IDAOProduct daoProduct in daoProductCollection)
					boProductCollection.Add(new BOProduct(daoProduct));
				
				return boProductCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ProductCollectionCount
		///This method returns the collection count of BOProduct objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ProductCollectionCount(IProductRepository iProductRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iProductRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///ProductCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOProduct>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iProductRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boProductCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOProduct> daoProductCollection = _iProductRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOProduct resdaoProduct in daoProductCollection)
					boProductCollection.Add((T)(object)new BOProduct(resdaoProduct));
				
				return boProductCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOProduct objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOProduct> boProductCollection = new List<IBOProduct>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iProductRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///OrderItemCollection
		///This method returns its collection of BOOrderItem objects
		///</Summary>
		///<returns>
		///IList[IBOOrderItem]
		///</returns>
		///<parameters>
		///BOProduct
		///</parameters>
		public virtual IList<IBOOrderItem> OrderItemCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderItemCollection == null)
					LoadOrderItemCollection();
				return _boOrderItemCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadOrderItemCollection
		///This method loads the internal collection of BOOrderItem objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderItemCollection()
		{
			Doing(this);
			try
			{
				_boOrderItemCollection = new List<IBOOrderItem>();
				IList<IDAOOrderItem> daoOrderItemCollection = _iOrderItemRepository.SelectAllByProductId(_id.Value);
				Done(this);
				
				foreach(IDAOOrderItem daoOrderItem in daoOrderItemCollection)
					_boOrderItemCollection.Add(new BOOrderItem(daoOrderItem));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrderItem
		///This method persists a BOOrderItem object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderItem
		///</parameters>
		public virtual void AddOrderItem(IBOOrderItem boOrderItem)
		{
			Doing(this);
			IDAOOrderItem daoOrderItem = _iOrderItemRepository.New();
			RegisterDataObject(_iOrderItemRepository, _iOrderItemRepository.BaseData(daoOrderItem));
			BeginTransaction(_iOrderItemRepository, "addOrderItem");
			try
			{
				daoOrderItem.Id = boOrderItem.Id;
				daoOrderItem.OrderId = boOrderItem.OrderId;
				daoOrderItem.UnitPrice = boOrderItem.UnitPrice;
				daoOrderItem.Quantity = boOrderItem.Quantity;
				daoOrderItem.ProductId = _id.Value;
				_iOrderItemRepository.Insert(daoOrderItem);
				CommitTransaction(_iOrderItemRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrderItem = new BOOrderItem(daoOrderItem);
				if(_boOrderItemCollection != null)
					_boOrderItemCollection.Add(boOrderItem);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "addOrderItem");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrderItem
		///This method deletes all BOOrderItem objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderItem()
		{
			Doing(this);
			RegisterDataObject(_iOrderItemRepository, null);
			BeginTransaction(_iOrderItemRepository, "deleteAllOrderItem");
			try
			{
				_iOrderItemRepository.DeleteAllByProductId(_id.Value);
				CommitTransaction(_iOrderItemRepository);
				Done(this);
				if(_boOrderItemCollection != null)
				{
					_boOrderItemCollection.Clear();
					_boOrderItemCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "deleteAllOrderItem");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IProductRepository ProductRepository
		{
			set
			{
				_iProductRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderItemRepository OrderItemRepository
		{
			set
			{
				_iOrderItemRepository = value;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductName
		{
			get
			{
				 return _productName;
			}
			set
			{
				_productName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SupplierId
		{
			get
			{
				 return _supplierId;
			}
			set
			{
				_supplierId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? UnitPrice
		{
			get
			{
				 return _unitPrice;
			}
			set
			{
				_unitPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual string Package
		{
			get
			{
				 return _package;
			}
			set
			{
				_package = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDiscontinued
		{
			get
			{
				 return _isDiscontinued;
			}
			set
			{
				_isDiscontinued = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iProductRepository;	}
			set {	ProductRepository = (IProductRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
