/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 5/6/2019 1:07:04 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using ProjectNameNorthwind.Data;
using ProjectNameNorthwind.Data.Interfaces;
using ProjectNameNorthwind.Business.Interfaces;
using ProjectNameNorthwind.Business.Repository.Interfaces;

namespace ProjectNameNorthwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCustomer.
	///It maintains a collection of BOOrder objects.
	///</Summary>
	public partial class BOCustomer : BaseBusiness, IBOCustomer, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _id;
		protected string _firstName;
		protected string _lastName;
		protected string _city;
		protected string _country;
		protected string _phone;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOOrder> _boOrderCollection;
		/*********************************************/
		/*repositories*********************************/
		protected ICustomerRepository _iCustomerRepository;
		protected IOrderRepository _iOrderRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCustomer()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public void Init(Int32 id)
		{
			try
			{
				IDAOCustomer daoCustomer = _iCustomerRepository.SelectOne(id);
				_id = daoCustomer.Id;
				_firstName = daoCustomer.FirstName;
				_lastName = daoCustomer.LastName;
				_city = daoCustomer.City;
				_country = daoCustomer.Country;
				_phone = daoCustomer.Phone;
				_ctrVersion = daoCustomer.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCustomer
		///</parameters>
		protected internal BOCustomer(IDAOCustomer daoCustomer)
		{
			try
			{
				_id = daoCustomer.Id;
				_firstName = daoCustomer.FirstName;
				_lastName = daoCustomer.LastName;
				_city = daoCustomer.City;
				_country = daoCustomer.Country;
				_phone = daoCustomer.Phone;
				_ctrVersion = daoCustomer.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Customer record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOCustomer daoCustomer = _iCustomerRepository.New();
			RegisterDataObject( _iCustomerRepository, _iCustomerRepository.BaseData(daoCustomer));
			BeginTransaction( _iCustomerRepository, "savenewBOCustomer");
			try
			{
				daoCustomer.FirstName = _firstName;
				daoCustomer.LastName = _lastName;
				daoCustomer.City = _city;
				daoCustomer.Country = _country;
				daoCustomer.Phone = _phone;
				_iCustomerRepository.Insert(daoCustomer);
				CommitTransaction( _iCustomerRepository);
				Done(this);
				
				_id = daoCustomer.Id;
				_firstName = daoCustomer.FirstName;
				_lastName = daoCustomer.LastName;
				_city = daoCustomer.City;
				_country = daoCustomer.Country;
				_phone = daoCustomer.Phone;
				_ctrVersion = daoCustomer.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iCustomerRepository, "savenewBOCustomer");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Customer record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCustomer
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOCustomer daoCustomer = _iCustomerRepository.New();
			RegisterDataObject(_iCustomerRepository, _iCustomerRepository.BaseData(daoCustomer));
			BeginTransaction(_iCustomerRepository, "updateBOCustomer");
			try
			{
				daoCustomer.Id = _id;
				daoCustomer.FirstName = _firstName;
				daoCustomer.LastName = _lastName;
				daoCustomer.City = _city;
				daoCustomer.Country = _country;
				daoCustomer.Phone = _phone;
				daoCustomer.CtrVersion = _ctrVersion;
				_iCustomerRepository.Update(daoCustomer);
				CommitTransaction(_iCustomerRepository);
				Done(this);
				
				_id = daoCustomer.Id;
				_firstName = daoCustomer.FirstName;
				_lastName = daoCustomer.LastName;
				_city = daoCustomer.City;
				_country = daoCustomer.Country;
				_phone = daoCustomer.Phone;
				_ctrVersion = daoCustomer.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iCustomerRepository, "updateBOCustomer");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Customer record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOCustomer daoCustomer = _iCustomerRepository.New();
			RegisterDataObject(_iCustomerRepository, _iCustomerRepository.BaseData(daoCustomer));
			BeginTransaction(_iCustomerRepository, "deleteBOCustomer");
			try
			{
				daoCustomer.Id = _id;
				_iCustomerRepository.Delete(daoCustomer);
				CommitTransaction(_iCustomerRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iCustomerRepository, "deleteBOCustomer");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///CustomerCollection
		///This method returns the collection of BOCustomer objects
		///</Summary>
		///<returns>
		///IList[IBOCustomer]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOCustomer> CustomerCollection(ICustomerRepository iCustomerRepository)
		{
			Doing(null);
			try
			{
				IList<IBOCustomer> boCustomerCollection = new List<IBOCustomer>();
				IList<IDAOCustomer> daoCustomerCollection = iCustomerRepository.SelectAll();
				Done(null);
				
				foreach(IDAOCustomer daoCustomer in daoCustomerCollection)
					boCustomerCollection.Add(new BOCustomer(daoCustomer));
				
				return boCustomerCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CustomerCollectionCount
		///This method returns the collection count of BOCustomer objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CustomerCollectionCount(ICustomerRepository iCustomerRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iCustomerRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///CustomerCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOCustomer>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iCustomerRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCustomerCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOCustomer> daoCustomerCollection = _iCustomerRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOCustomer resdaoCustomer in daoCustomerCollection)
					boCustomerCollection.Add((T)(object)new BOCustomer(resdaoCustomer));
				
				return boCustomerCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOCustomer objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOCustomer> boCustomerCollection = new List<IBOCustomer>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iCustomerRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///OrderCollection
		///This method returns its collection of BOOrder objects
		///</Summary>
		///<returns>
		///IList[IBOOrder]
		///</returns>
		///<parameters>
		///BOCustomer
		///</parameters>
		public virtual IList<IBOOrder> OrderCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderCollection == null)
					LoadOrderCollection();
				return _boOrderCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadOrderCollection
		///This method loads the internal collection of BOOrder objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderCollection()
		{
			Doing(this);
			try
			{
				_boOrderCollection = new List<IBOOrder>();
				IList<IDAOOrder> daoOrderCollection = _iOrderRepository.SelectAllByCustomerId(_id.Value);
				Done(this);
				
				foreach(IDAOOrder daoOrder in daoOrderCollection)
					_boOrderCollection.Add(new BOOrder(daoOrder));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrder
		///This method persists a BOOrder object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrder
		///</parameters>
		public virtual void AddOrder(IBOOrder boOrder)
		{
			Doing(this);
			IDAOOrder daoOrder = _iOrderRepository.New();
			RegisterDataObject(_iOrderRepository, _iOrderRepository.BaseData(daoOrder));
			BeginTransaction(_iOrderRepository, "addOrder");
			try
			{
				daoOrder.Id = boOrder.Id;
				daoOrder.OrderDate = boOrder.OrderDate;
				daoOrder.OrderNumber = boOrder.OrderNumber;
				daoOrder.TotalAmount = boOrder.TotalAmount;
				daoOrder.CustomerId = _id.Value;
				_iOrderRepository.Insert(daoOrder);
				CommitTransaction(_iOrderRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrder = new BOOrder(daoOrder);
				if(_boOrderCollection != null)
					_boOrderCollection.Add(boOrder);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderRepository, "addOrder");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrder
		///This method deletes all BOOrder objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrder()
		{
			Doing(this);
			RegisterDataObject(_iOrderRepository, null);
			BeginTransaction(_iOrderRepository, "deleteAllOrder");
			try
			{
				_iOrderRepository.DeleteAllByCustomerId(_id.Value);
				CommitTransaction(_iOrderRepository);
				Done(this);
				if(_boOrderCollection != null)
				{
					_boOrderCollection.Clear();
					_boOrderCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderRepository, "deleteAllOrder");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ICustomerRepository CustomerRepository
		{
			set
			{
				_iCustomerRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderRepository OrderRepository
		{
			set
			{
				_iOrderRepository = value;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string FirstName
		{
			get
			{
				 return _firstName;
			}
			set
			{
				_firstName = value;
				_isDirty = true;
			}
		}
		
		public virtual string LastName
		{
			get
			{
				 return _lastName;
			}
			set
			{
				_lastName = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string Country
		{
			get
			{
				 return _country;
			}
			set
			{
				_country = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iCustomerRepository;	}
			set {	CustomerRepository = (ICustomerRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
