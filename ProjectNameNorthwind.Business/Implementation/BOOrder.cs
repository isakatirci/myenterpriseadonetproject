/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 5/6/2019 1:07:04 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using ProjectNameNorthwind.Data;
using ProjectNameNorthwind.Data.Interfaces;
using ProjectNameNorthwind.Business.Interfaces;
using ProjectNameNorthwind.Business.Repository.Interfaces;

namespace ProjectNameNorthwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrder.
	///It maintains a collection of BOOrderItem objects.
	///</Summary>
	public partial class BOOrder : zProjectNameNorthwindConn_BaseBusiness, IBOOrder, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _id;
		protected DateTime? _orderDate;
		protected string _orderNumber;
		protected Int32? _customerId;
		protected decimal? _totalAmount;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOOrderItem> _boOrderItemCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IOrderRepository _iOrderRepository;
		protected IOrderItemRepository _iOrderItemRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrder()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public void Init(Int32 id)
		{
			try
			{
				IDAOOrder daoOrder = _iOrderRepository.SelectOne(id);
				_id = daoOrder.Id;
				_orderDate = daoOrder.OrderDate;
				_orderNumber = daoOrder.OrderNumber;
				_customerId = daoOrder.CustomerId;
				_totalAmount = daoOrder.TotalAmount;
				_ctrVersion = daoOrder.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrder
		///</parameters>
		protected internal BOOrder(IDAOOrder daoOrder)
		{
			try
			{
				_id = daoOrder.Id;
				_orderDate = daoOrder.OrderDate;
				_orderNumber = daoOrder.OrderNumber;
				_customerId = daoOrder.CustomerId;
				_totalAmount = daoOrder.TotalAmount;
				_ctrVersion = daoOrder.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Order record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOOrder daoOrder = _iOrderRepository.New();
			RegisterDataObject( _iOrderRepository, _iOrderRepository.BaseData(daoOrder));
			BeginTransaction( _iOrderRepository, "savenewBOOrder");
			try
			{
				daoOrder.OrderDate = _orderDate;
				daoOrder.OrderNumber = _orderNumber;
				daoOrder.CustomerId = _customerId;
				daoOrder.TotalAmount = _totalAmount;
				_iOrderRepository.Insert(daoOrder);
				CommitTransaction( _iOrderRepository);
				Done(this);
				
				_id = daoOrder.Id;
				_orderDate = daoOrder.OrderDate;
				_orderNumber = daoOrder.OrderNumber;
				_customerId = daoOrder.CustomerId;
				_totalAmount = daoOrder.TotalAmount;
				_ctrVersion = daoOrder.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderRepository, "savenewBOOrder");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Order record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrder
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOOrder daoOrder = _iOrderRepository.New();
			RegisterDataObject(_iOrderRepository, _iOrderRepository.BaseData(daoOrder));
			BeginTransaction(_iOrderRepository, "updateBOOrder");
			try
			{
				daoOrder.Id = _id;
				daoOrder.OrderDate = _orderDate;
				daoOrder.OrderNumber = _orderNumber;
				daoOrder.CustomerId = _customerId;
				daoOrder.TotalAmount = _totalAmount;
				daoOrder.CtrVersion = _ctrVersion;
				_iOrderRepository.Update(daoOrder);
				CommitTransaction(_iOrderRepository);
				Done(this);
				
				_id = daoOrder.Id;
				_orderDate = daoOrder.OrderDate;
				_orderNumber = daoOrder.OrderNumber;
				_customerId = daoOrder.CustomerId;
				_totalAmount = daoOrder.TotalAmount;
				_ctrVersion = daoOrder.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderRepository, "updateBOOrder");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Order record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOOrder daoOrder = _iOrderRepository.New();
			RegisterDataObject(_iOrderRepository, _iOrderRepository.BaseData(daoOrder));
			BeginTransaction(_iOrderRepository, "deleteBOOrder");
			try
			{
				daoOrder.Id = _id;
				_iOrderRepository.Delete(daoOrder);
				CommitTransaction(_iOrderRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderRepository, "deleteBOOrder");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///OrderCollection
		///This method returns the collection of BOOrder objects
		///</Summary>
		///<returns>
		///IList[IBOOrder]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOOrder> OrderCollection(IOrderRepository iOrderRepository)
		{
			Doing(null);
			try
			{
				IList<IBOOrder> boOrderCollection = new List<IBOOrder>();
				IList<IDAOOrder> daoOrderCollection = iOrderRepository.SelectAll();
				Done(null);
				
				foreach(IDAOOrder daoOrder in daoOrderCollection)
					boOrderCollection.Add(new BOOrder(daoOrder));
				
				return boOrderCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///OrderCollectionCount
		///This method returns the collection count of BOOrder objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrderCollectionCount(IOrderRepository iOrderRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iOrderRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///OrderCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOOrder>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iOrderRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrderCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOOrder> daoOrderCollection = _iOrderRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOOrder resdaoOrder in daoOrderCollection)
					boOrderCollection.Add((T)(object)new BOOrder(resdaoOrder));
				
				return boOrderCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOOrder objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOOrder> boOrderCollection = new List<IBOOrder>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iOrderRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///OrderItemCollection
		///This method returns its collection of BOOrderItem objects
		///</Summary>
		///<returns>
		///IList[IBOOrderItem]
		///</returns>
		///<parameters>
		///BOOrder
		///</parameters>
		public virtual IList<IBOOrderItem> OrderItemCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderItemCollection == null)
					LoadOrderItemCollection();
				return _boOrderItemCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadOrderItemCollection
		///This method loads the internal collection of BOOrderItem objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderItemCollection()
		{
			Doing(this);
			try
			{
				_boOrderItemCollection = new List<IBOOrderItem>();
				IList<IDAOOrderItem> daoOrderItemCollection = _iOrderItemRepository.SelectAllByOrderId(_id.Value);
				Done(this);
				
				foreach(IDAOOrderItem daoOrderItem in daoOrderItemCollection)
					_boOrderItemCollection.Add(new BOOrderItem(daoOrderItem));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrderItem
		///This method persists a BOOrderItem object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderItem
		///</parameters>
		public virtual void AddOrderItem(IBOOrderItem boOrderItem)
		{
			Doing(this);
			IDAOOrderItem daoOrderItem = _iOrderItemRepository.New();
			RegisterDataObject(_iOrderItemRepository, _iOrderItemRepository.BaseData(daoOrderItem));
			BeginTransaction(_iOrderItemRepository, "addOrderItem");
			try
			{
				daoOrderItem.Id = boOrderItem.Id;
				daoOrderItem.ProductId = boOrderItem.ProductId;
				daoOrderItem.UnitPrice = boOrderItem.UnitPrice;
				daoOrderItem.Quantity = boOrderItem.Quantity;
				daoOrderItem.OrderId = _id.Value;
				_iOrderItemRepository.Insert(daoOrderItem);
				CommitTransaction(_iOrderItemRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrderItem = new BOOrderItem(daoOrderItem);
				if(_boOrderItemCollection != null)
					_boOrderItemCollection.Add(boOrderItem);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "addOrderItem");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrderItem
		///This method deletes all BOOrderItem objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderItem()
		{
			Doing(this);
			RegisterDataObject(_iOrderItemRepository, null);
			BeginTransaction(_iOrderItemRepository, "deleteAllOrderItem");
			try
			{
				_iOrderItemRepository.DeleteAllByOrderId(_id.Value);
				CommitTransaction(_iOrderItemRepository);
				Done(this);
				if(_boOrderItemCollection != null)
				{
					_boOrderItemCollection.Clear();
					_boOrderItemCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "deleteAllOrderItem");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderRepository OrderRepository
		{
			set
			{
				_iOrderRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderItemRepository OrderItemRepository
		{
			set
			{
				_iOrderItemRepository = value;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? OrderDate
		{
			get
			{
				 return _orderDate;
			}
			set
			{
				_orderDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string OrderNumber
		{
			get
			{
				 return _orderNumber;
			}
			set
			{
				_orderNumber = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CustomerId
		{
			get
			{
				 return _customerId;
			}
			set
			{
				_customerId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? TotalAmount
		{
			get
			{
				 return _totalAmount;
			}
			set
			{
				_totalAmount = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iOrderRepository;	}
			set {	OrderRepository = (IOrderRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
