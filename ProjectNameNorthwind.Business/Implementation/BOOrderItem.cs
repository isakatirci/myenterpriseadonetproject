/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 5/6/2019 1:07:04 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using ProjectNameNorthwind.Data;
using ProjectNameNorthwind.Data.Interfaces;
using ProjectNameNorthwind.Business.Interfaces;
using ProjectNameNorthwind.Business.Repository.Interfaces;

namespace ProjectNameNorthwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrderItem.
	///</Summary>
	public partial class BOOrderItem : BaseBusiness, IBOOrderItem, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _orderId;
		protected Int32? _productId;
		protected decimal? _unitPrice;
		protected Int32? _quantity;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IOrderItemRepository _iOrderItemRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrderItem()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public void Init(Int32 id)
		{
			try
			{
				IDAOOrderItem daoOrderItem = _iOrderItemRepository.SelectOne(id);
				_id = daoOrderItem.Id;
				_orderId = daoOrderItem.OrderId;
				_productId = daoOrderItem.ProductId;
				_unitPrice = daoOrderItem.UnitPrice;
				_quantity = daoOrderItem.Quantity;
				_ctrVersion = daoOrderItem.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrderItem
		///</parameters>
		protected internal BOOrderItem(IDAOOrderItem daoOrderItem)
		{
			try
			{
				_id = daoOrderItem.Id;
				_orderId = daoOrderItem.OrderId;
				_productId = daoOrderItem.ProductId;
				_unitPrice = daoOrderItem.UnitPrice;
				_quantity = daoOrderItem.Quantity;
				_ctrVersion = daoOrderItem.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OrderItem record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOOrderItem daoOrderItem = _iOrderItemRepository.New();
			RegisterDataObject( _iOrderItemRepository, _iOrderItemRepository.BaseData(daoOrderItem));
			BeginTransaction( _iOrderItemRepository, "savenewBOOrderItem");
			try
			{
				daoOrderItem.OrderId = _orderId;
				daoOrderItem.ProductId = _productId;
				daoOrderItem.UnitPrice = _unitPrice;
				daoOrderItem.Quantity = _quantity;
				_iOrderItemRepository.Insert(daoOrderItem);
				CommitTransaction( _iOrderItemRepository);
				Done(this);
				
				_id = daoOrderItem.Id;
				_orderId = daoOrderItem.OrderId;
				_productId = daoOrderItem.ProductId;
				_unitPrice = daoOrderItem.UnitPrice;
				_quantity = daoOrderItem.Quantity;
				_ctrVersion = daoOrderItem.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "savenewBOOrderItem");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one OrderItem record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderItem
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOOrderItem daoOrderItem = _iOrderItemRepository.New();
			RegisterDataObject(_iOrderItemRepository, _iOrderItemRepository.BaseData(daoOrderItem));
			BeginTransaction(_iOrderItemRepository, "updateBOOrderItem");
			try
			{
				daoOrderItem.Id = _id;
				daoOrderItem.OrderId = _orderId;
				daoOrderItem.ProductId = _productId;
				daoOrderItem.UnitPrice = _unitPrice;
				daoOrderItem.Quantity = _quantity;
				daoOrderItem.CtrVersion = _ctrVersion;
				_iOrderItemRepository.Update(daoOrderItem);
				CommitTransaction(_iOrderItemRepository);
				Done(this);
				
				_id = daoOrderItem.Id;
				_orderId = daoOrderItem.OrderId;
				_productId = daoOrderItem.ProductId;
				_unitPrice = daoOrderItem.UnitPrice;
				_quantity = daoOrderItem.Quantity;
				_ctrVersion = daoOrderItem.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "updateBOOrderItem");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OrderItem record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOOrderItem daoOrderItem = _iOrderItemRepository.New();
			RegisterDataObject(_iOrderItemRepository, _iOrderItemRepository.BaseData(daoOrderItem));
			BeginTransaction(_iOrderItemRepository, "deleteBOOrderItem");
			try
			{
				daoOrderItem.Id = _id;
				_iOrderItemRepository.Delete(daoOrderItem);
				CommitTransaction(_iOrderItemRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderItemRepository, "deleteBOOrderItem");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///OrderItemCollection
		///This method returns the collection of BOOrderItem objects
		///</Summary>
		///<returns>
		///IList[IBOOrderItem]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOOrderItem> OrderItemCollection(IOrderItemRepository iOrderItemRepository)
		{
			Doing(null);
			try
			{
				IList<IBOOrderItem> boOrderItemCollection = new List<IBOOrderItem>();
				IList<IDAOOrderItem> daoOrderItemCollection = iOrderItemRepository.SelectAll();
				Done(null);
				
				foreach(IDAOOrderItem daoOrderItem in daoOrderItemCollection)
					boOrderItemCollection.Add(new BOOrderItem(daoOrderItem));
				
				return boOrderItemCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///OrderItemCollectionCount
		///This method returns the collection count of BOOrderItem objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrderItemCollectionCount(IOrderItemRepository iOrderItemRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iOrderItemRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///OrderItemCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOOrderItem>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iOrderItemRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrderItemCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOOrderItem> daoOrderItemCollection = _iOrderItemRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOOrderItem resdaoOrderItem in daoOrderItemCollection)
					boOrderItemCollection.Add((T)(object)new BOOrderItem(resdaoOrderItem));
				
				return boOrderItemCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOOrderItem objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOOrderItem> boOrderItemCollection = new List<IBOOrderItem>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iOrderItemRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderItemRepository OrderItemRepository
		{
			set
			{
				_iOrderItemRepository = value;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OrderId
		{
			get
			{
				 return _orderId;
			}
			set
			{
				_orderId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ProductId
		{
			get
			{
				 return _productId;
			}
			set
			{
				_productId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? UnitPrice
		{
			get
			{
				 return _unitPrice;
			}
			set
			{
				_unitPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iOrderItemRepository;	}
			set {	OrderItemRepository = (IOrderItemRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
