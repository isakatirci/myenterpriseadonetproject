/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 5/6/2019 1:07:04 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using ProjectNameNorthwind.Data;
using ProjectNameNorthwind.Data.Interfaces;
using ProjectNameNorthwind.Business.Interfaces;
using ProjectNameNorthwind.Business.Repository.Interfaces;

namespace ProjectNameNorthwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSupplier.
	///It maintains a collection of BOProduct objects.
	///</Summary>
	public partial class BOSupplier : zProjectNameNorthwindConn_BaseBusiness, IBOSupplier, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _id;
		protected string _companyName;
		protected string _contactName;
		protected string _contactTitle;
		protected string _city;
		protected string _country;
		protected string _phone;
		protected string _fax;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOProduct> _boProductCollection;
		/*********************************************/
		/*repositories*********************************/
		protected ISupplierRepository _iSupplierRepository;
		protected IProductRepository _iProductRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSupplier()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public void Init(Int32 id)
		{
			try
			{
				IDAOSupplier daoSupplier = _iSupplierRepository.SelectOne(id);
				_id = daoSupplier.Id;
				_companyName = daoSupplier.CompanyName;
				_contactName = daoSupplier.ContactName;
				_contactTitle = daoSupplier.ContactTitle;
				_city = daoSupplier.City;
				_country = daoSupplier.Country;
				_phone = daoSupplier.Phone;
				_fax = daoSupplier.Fax;
				_ctrVersion = daoSupplier.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSupplier
		///</parameters>
		protected internal BOSupplier(IDAOSupplier daoSupplier)
		{
			try
			{
				_id = daoSupplier.Id;
				_companyName = daoSupplier.CompanyName;
				_contactName = daoSupplier.ContactName;
				_contactTitle = daoSupplier.ContactTitle;
				_city = daoSupplier.City;
				_country = daoSupplier.Country;
				_phone = daoSupplier.Phone;
				_fax = daoSupplier.Fax;
				_ctrVersion = daoSupplier.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Supplier record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOSupplier daoSupplier = _iSupplierRepository.New();
			RegisterDataObject( _iSupplierRepository, _iSupplierRepository.BaseData(daoSupplier));
			BeginTransaction( _iSupplierRepository, "savenewBOSupplier");
			try
			{
				daoSupplier.CompanyName = _companyName;
				daoSupplier.ContactName = _contactName;
				daoSupplier.ContactTitle = _contactTitle;
				daoSupplier.City = _city;
				daoSupplier.Country = _country;
				daoSupplier.Phone = _phone;
				daoSupplier.Fax = _fax;
				_iSupplierRepository.Insert(daoSupplier);
				CommitTransaction( _iSupplierRepository);
				Done(this);
				
				_id = daoSupplier.Id;
				_companyName = daoSupplier.CompanyName;
				_contactName = daoSupplier.ContactName;
				_contactTitle = daoSupplier.ContactTitle;
				_city = daoSupplier.City;
				_country = daoSupplier.Country;
				_phone = daoSupplier.Phone;
				_fax = daoSupplier.Fax;
				_ctrVersion = daoSupplier.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSupplierRepository, "savenewBOSupplier");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Supplier record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSupplier
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOSupplier daoSupplier = _iSupplierRepository.New();
			RegisterDataObject(_iSupplierRepository, _iSupplierRepository.BaseData(daoSupplier));
			BeginTransaction(_iSupplierRepository, "updateBOSupplier");
			try
			{
				daoSupplier.Id = _id;
				daoSupplier.CompanyName = _companyName;
				daoSupplier.ContactName = _contactName;
				daoSupplier.ContactTitle = _contactTitle;
				daoSupplier.City = _city;
				daoSupplier.Country = _country;
				daoSupplier.Phone = _phone;
				daoSupplier.Fax = _fax;
				daoSupplier.CtrVersion = _ctrVersion;
				_iSupplierRepository.Update(daoSupplier);
				CommitTransaction(_iSupplierRepository);
				Done(this);
				
				_id = daoSupplier.Id;
				_companyName = daoSupplier.CompanyName;
				_contactName = daoSupplier.ContactName;
				_contactTitle = daoSupplier.ContactTitle;
				_city = daoSupplier.City;
				_country = daoSupplier.Country;
				_phone = daoSupplier.Phone;
				_fax = daoSupplier.Fax;
				_ctrVersion = daoSupplier.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSupplierRepository, "updateBOSupplier");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Supplier record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOSupplier daoSupplier = _iSupplierRepository.New();
			RegisterDataObject(_iSupplierRepository, _iSupplierRepository.BaseData(daoSupplier));
			BeginTransaction(_iSupplierRepository, "deleteBOSupplier");
			try
			{
				daoSupplier.Id = _id;
				_iSupplierRepository.Delete(daoSupplier);
				CommitTransaction(_iSupplierRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSupplierRepository, "deleteBOSupplier");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///SupplierCollection
		///This method returns the collection of BOSupplier objects
		///</Summary>
		///<returns>
		///IList[IBOSupplier]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOSupplier> SupplierCollection(ISupplierRepository iSupplierRepository)
		{
			Doing(null);
			try
			{
				IList<IBOSupplier> boSupplierCollection = new List<IBOSupplier>();
				IList<IDAOSupplier> daoSupplierCollection = iSupplierRepository.SelectAll();
				Done(null);
				
				foreach(IDAOSupplier daoSupplier in daoSupplierCollection)
					boSupplierCollection.Add(new BOSupplier(daoSupplier));
				
				return boSupplierCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SupplierCollectionCount
		///This method returns the collection count of BOSupplier objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SupplierCollectionCount(ISupplierRepository iSupplierRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iSupplierRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///SupplierCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOSupplier>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iSupplierRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSupplierCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOSupplier> daoSupplierCollection = _iSupplierRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOSupplier resdaoSupplier in daoSupplierCollection)
					boSupplierCollection.Add((T)(object)new BOSupplier(resdaoSupplier));
				
				return boSupplierCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOSupplier objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOSupplier> boSupplierCollection = new List<IBOSupplier>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iSupplierRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///ProductCollection
		///This method returns its collection of BOProduct objects
		///</Summary>
		///<returns>
		///IList[IBOProduct]
		///</returns>
		///<parameters>
		///BOSupplier
		///</parameters>
		public virtual IList<IBOProduct> ProductCollection()
		{
			Doing(this);
			try
			{
				if(_boProductCollection == null)
					LoadProductCollection();
				return _boProductCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadProductCollection
		///This method loads the internal collection of BOProduct objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadProductCollection()
		{
			Doing(this);
			try
			{
				_boProductCollection = new List<IBOProduct>();
				IList<IDAOProduct> daoProductCollection = _iProductRepository.SelectAllBySupplierId(_id.Value);
				Done(this);
				
				foreach(IDAOProduct daoProduct in daoProductCollection)
					_boProductCollection.Add(new BOProduct(daoProduct));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddProduct
		///This method persists a BOProduct object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOProduct
		///</parameters>
		public virtual void AddProduct(IBOProduct boProduct)
		{
			Doing(this);
			IDAOProduct daoProduct = _iProductRepository.New();
			RegisterDataObject(_iProductRepository, _iProductRepository.BaseData(daoProduct));
			BeginTransaction(_iProductRepository, "addProduct");
			try
			{
				daoProduct.Id = boProduct.Id;
				daoProduct.ProductName = boProduct.ProductName;
				daoProduct.UnitPrice = boProduct.UnitPrice;
				daoProduct.Package = boProduct.Package;
				daoProduct.IsDiscontinued = boProduct.IsDiscontinued;
				daoProduct.SupplierId = _id.Value;
				_iProductRepository.Insert(daoProduct);
				CommitTransaction(_iProductRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boProduct = new BOProduct(daoProduct);
				if(_boProductCollection != null)
					_boProductCollection.Add(boProduct);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductRepository, "addProduct");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllProduct
		///This method deletes all BOProduct objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllProduct()
		{
			Doing(this);
			RegisterDataObject(_iProductRepository, null);
			BeginTransaction(_iProductRepository, "deleteAllProduct");
			try
			{
				_iProductRepository.DeleteAllBySupplierId(_id.Value);
				CommitTransaction(_iProductRepository);
				Done(this);
				if(_boProductCollection != null)
				{
					_boProductCollection.Clear();
					_boProductCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductRepository, "deleteAllProduct");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ISupplierRepository SupplierRepository
		{
			set
			{
				_iSupplierRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IProductRepository ProductRepository
		{
			set
			{
				_iProductRepository = value;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyName
		{
			get
			{
				 return _companyName;
			}
			set
			{
				_companyName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContactName
		{
			get
			{
				 return _contactName;
			}
			set
			{
				_contactName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContactTitle
		{
			get
			{
				 return _contactTitle;
			}
			set
			{
				_contactTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string Country
		{
			get
			{
				 return _country;
			}
			set
			{
				_country = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string Fax
		{
			get
			{
				 return _fax;
			}
			set
			{
				_fax = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iSupplierRepository;	}
			set {	SupplierRepository = (ISupplierRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
