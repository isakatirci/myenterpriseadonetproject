/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 5/6/2019 1:07:04 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ProjectNameNorthwind.Data.Interfaces;

namespace ProjectNameNorthwind.Data
{
	public partial class DAOOrderItem : BaseData, IDAOOrderItem
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _orderId;
		protected Int32? _productId;
		protected decimal? _unitPrice;
		protected Int32? _quantity;
		protected Int32? _ctrVersion;
		#endregion

		#region class methods
		public DAOOrderItem()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table OrderItem based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOOrderItem
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static IDAOOrderItem SelectOne(Int32? id)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrderItem");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				DAOOrderItem retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrderItem();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._orderId					 = Convert.IsDBNull(dt.Rows[0]["OrderId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OrderId"];
					retObj._productId					 = Convert.IsDBNull(dt.Rows[0]["ProductId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ProductId"];
					retObj._unitPrice					 = Convert.IsDBNull(dt.Rows[0]["UnitPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["UnitPrice"];
					retObj._quantity					 = Convert.IsDBNull(dt.Rows[0]["Quantity"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Quantity"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table OrderItem based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OrderItem based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOOrderItem.
		///</returns>
		///<parameters>
		///Int32? orderId
		///</parameters>
		public static IList<IDAOOrderItem> SelectAllByOrderId(Int32? orderId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectAllByOrderId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrderItem");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrderItem> objList = new List<IDAOOrderItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderItem retObj = new DAOOrderItem();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._orderId					 = Convert.IsDBNull(row["OrderId"]) ? (Int32?)null : (Int32?)row["OrderId"];
						retObj._productId					 = Convert.IsDBNull(row["ProductId"]) ? (Int32?)null : (Int32?)row["ProductId"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? orderId
		///</parameters>
		public static Int32 SelectAllByOrderIdCount(Int32? orderId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectAllByOrderIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OrderItem with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzProjectNameNorthwindConn_TxConnectionProvider connectionProvider, Int32? orderId
		///</parameters>
		public static void DeleteAllByOrderId(IConnectionProvider connectionProvider, Int32? orderId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_DeleteAllByOrderId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderId?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table OrderItem based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOOrderItem.
		///</returns>
		///<parameters>
		///Int32? productId
		///</parameters>
		public static IList<IDAOOrderItem> SelectAllByProductId(Int32? productId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectAllByProductId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrderItem");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrderItem> objList = new List<IDAOOrderItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderItem retObj = new DAOOrderItem();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._orderId					 = Convert.IsDBNull(row["OrderId"]) ? (Int32?)null : (Int32?)row["OrderId"];
						retObj._productId					 = Convert.IsDBNull(row["ProductId"]) ? (Int32?)null : (Int32?)row["ProductId"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? productId
		///</parameters>
		public static Int32 SelectAllByProductIdCount(Int32? productId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectAllByProductIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productId?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table OrderItem with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzProjectNameNorthwindConn_TxConnectionProvider connectionProvider, Int32? productId
		///</parameters>
		public static void DeleteAllByProductId(IConnectionProvider connectionProvider, Int32? productId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_DeleteAllByProductId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productId?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table OrderItem
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(CtSqlParameter.Get("@OrderId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_productId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 12, 2, "", DataRowVersion.Proposed, (object)_unitPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Id"].Value;
				_orderId					 = Convert.IsDBNull(command.Parameters["@OrderId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OrderId"].Value;
				_productId					 = Convert.IsDBNull(command.Parameters["@ProductId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ProductId"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["@UnitPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@UnitPrice"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quantity"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table OrderItem
		///</Summary>
		///<returns>
		///IList-IDAOOrderItem.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IDAOOrderItem> SelectAll()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrderItem");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrderItem> objList = new List<IDAOOrderItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderItem retObj = new DAOOrderItem();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._orderId					 = Convert.IsDBNull(row["OrderId"]) ? (Int32?)null : (Int32?)row["OrderId"];
						retObj._productId					 = Convert.IsDBNull(row["ProductId"]) ? (Int32?)null : (Int32?)row["ProductId"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOrderItem
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrderItem_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrderItem");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "Id", true) == 0) lst.Add(Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"]);
						if (string.Compare(projection.Member, "OrderId", true) == 0) lst.Add(Convert.IsDBNull(row["OrderId"]) ? (Int32?)null : (Int32?)row["OrderId"]);
						if (string.Compare(projection.Member, "ProductId", true) == 0) lst.Add(Convert.IsDBNull(row["ProductId"]) ? (Int32?)null : (Int32?)row["ProductId"]);
						if (string.Compare(projection.Member, "UnitPrice", true) == 0) lst.Add(Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"]);
						if (string.Compare(projection.Member, "Quantity", true) == 0) lst.Add(Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api OrderItem
		///</Summary>
		///<returns>
		///IList-IDAOOrderItem.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<IDAOOrderItem> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrderItem_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("OrderItem");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrderItem> objList = new List<IDAOOrderItem>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderItem retObj = new DAOOrderItem();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._orderId					 = Convert.IsDBNull(row["OrderId"]) ? (Int32?)null : (Int32?)row["OrderId"];
						retObj._productId					 = Convert.IsDBNull(row["ProductId"]) ? (Int32?)null : (Int32?)row["ProductId"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int32?)null : (Int32?)row["Quantity"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api OrderItem
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrderItem_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table OrderItem based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderItem_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OrderId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_productId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitPrice", SqlDbType.Decimal, 9, ParameterDirection.InputOutput, false, 12, 2, "", DataRowVersion.Proposed, (object)_unitPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_ctrVersion?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Id"].Value;
				_orderId					 = Convert.IsDBNull(command.Parameters["@OrderId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OrderId"].Value;
				_productId					 = Convert.IsDBNull(command.Parameters["@ProductId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ProductId"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["@UnitPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@UnitPrice"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Quantity"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public Int32? OrderId
		{
			get
			{
				return _orderId;
			}
			set
			{
				_orderId = value;
			}
		}

		public Int32? ProductId
		{
			get
			{
				return _productId;
			}
			set
			{
				_productId = value;
			}
		}

		public decimal? UnitPrice
		{
			get
			{
				return _unitPrice;
			}
			set
			{
				_unitPrice = value;
			}
		}

		public Int32? Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}

		public Int32? CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace ProjectNameNorthwind.Data
{
	public partial class InlineProcs
	{
		internal static string ctprOrderItem_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[OrderId]
			,[ProductId]
			,[UnitPrice]
			,[Quantity]
			,[ctr_version]
			FROM [dbo].[OrderItem]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprOrderItem_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[OrderItem]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprOrderItem_SelectAllByOrderId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[OrderId]
			,[ProductId]
			,[UnitPrice]
			,[Quantity]
			,[ctr_version]
			FROM [dbo].[OrderItem]
			WHERE 
			[OrderId] = @OrderId OR ([OrderId] IS NULL AND @OrderId IS NULL)
			";

		internal static string ctprOrderItem_SelectAllByOrderIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OrderItem]
			WHERE 
			[OrderId] = @OrderId OR ([OrderId] IS NULL AND @OrderId IS NULL)
			";

		internal static string ctprOrderItem_DeleteAllByOrderId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OrderItem]
			WHERE 
			[OrderId] = @OrderId OR ([OrderId] IS NULL AND @OrderId IS NULL)
			";

		internal static string ctprOrderItem_SelectAllByProductId = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[OrderId]
			,[ProductId]
			,[UnitPrice]
			,[Quantity]
			,[ctr_version]
			FROM [dbo].[OrderItem]
			WHERE 
			[ProductId] = @ProductId OR ([ProductId] IS NULL AND @ProductId IS NULL)
			";

		internal static string ctprOrderItem_SelectAllByProductIdCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OrderItem]
			WHERE 
			[ProductId] = @ProductId OR ([ProductId] IS NULL AND @ProductId IS NULL)
			";

		internal static string ctprOrderItem_DeleteAllByProductId = @"
			
			-- delete all matching from the table
			DELETE [dbo].[OrderItem]
			WHERE 
			[ProductId] = @ProductId OR ([ProductId] IS NULL AND @ProductId IS NULL)
			";

		internal static string ctprOrderItem_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[OrderItem]
			(
			[OrderId]
			,[ProductId]
			,[UnitPrice]
			,[Quantity]
			)
			VALUES
			(
			@OrderId
			,@ProductId
			,@UnitPrice
			,@Quantity
			)
			SELECT 
			@Id = [Id]
			,@OrderId = [OrderId]
			,@ProductId = [ProductId]
			,@UnitPrice = [UnitPrice]
			,@Quantity = [Quantity]
			,@ctr_version = [ctr_version]
			FROM [dbo].[OrderItem]
			WHERE 
			[Id] = SCOPE_IDENTITY()
			";

		internal static string ctprOrderItem_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[OrderId]
			,[ProductId]
			,[UnitPrice]
			,[Quantity]
			,[ctr_version]
			FROM [dbo].[OrderItem]
			";

		internal static string ctprOrderItem_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[OrderItem]
			";

		internal static string ctprOrderItem_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[OrderItem]
			##CRITERIA##
			";

		internal static string ctprOrderItem_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[Id]
			,[OrderId]
			,[ProductId]
			,[UnitPrice]
			,[Quantity]
			,[ctr_version]
			FROM [dbo].[OrderItem]
			##CRITERIA##
			";

		internal static string ctprOrderItem_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[OrderItem]
			##CRITERIA##
			";

		internal static string ctprOrderItem_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			--data optimistic concurrency handling ----------------------------
			DECLARE @currVersion INT
			SELECT @currVersion = [ctr_version] FROM [dbo].[OrderItem]
			WHERE [Id] = @Id
			
			IF @currVersion > @ctr_version
			RAISERROR('data concurrency issue updating this record, possible stale data. %s', 16, 1, 
			'[dbo].[OrderItem] WHERE WHERE [Id] = @Id')
			
			IF @currVersion IS NULL
			RAISERROR('data concurrency issue updating this record, record not available (not found). %s', 16, 1, 
			'[dbo].[OrderItem] WHERE WHERE [Id] = @Id')
			
			SET @ctr_version = @currVersion  + 1 
			-------------------------------------------------------------------
			UPDATE [dbo].[OrderItem]
			SET
			[OrderId] = @OrderId
			,[ProductId] = @ProductId
			,[UnitPrice] = @UnitPrice
			,[Quantity] = @Quantity
			,[ctr_version] = @ctr_version
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@OrderId = [OrderId]
			,@ProductId = [ProductId]
			,@UnitPrice = [UnitPrice]
			,@Quantity = [Quantity]
			,@ctr_version = [ctr_version]
			FROM [dbo].[OrderItem]
			WHERE 
			[Id] = @Id
			";

	}
}
#endregion
